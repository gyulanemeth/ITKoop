<?xml version="1.0" encoding="UTF-8"?>
<!--
	Document   : jWebSocket.xml
	Created on : March 18, 2010, 10:24 AM
	Author     : aschulze, puran
	Description: Configuration of the jWebSocket Server.
	This includes engines, servers, plug-ins, filter, rights, roles and users 
	as well as logging.
-->

<!-- jWebSocket server configuration -->
<jWebSocket>
	<!--
		installation can be prod or dev.
		  'prod'- installation means all the classes will be loaded
		   from the jars defined in this configuration file
		  'dev' - installation means running directly from the source,
		   all the jar files given are ignored.
		   Default value if not specified would be 'prod'
	-->
	<installation>prod</installation>

	<!--
		define the protocol, default protocol if not specified is 'json'
		possible values are [json|xml|csv]
	-->
	<protocol>json</protocol>

	<!--
		the unique ID of this instance within a jWebSocket cluster
		can be left empty to run just a single stand-alone server
		Preparation for pending cluster-plug-in
	-->
	<node_id>01</node_id>

	<!-- Auto load required external libraries -->
	<libraries>
		<!--
		<library>
			<id>Description of third party .jar to be loaded by jWebSocket</id>
			<url>/etc/myjars/test.jar</url>
			<description>Description of third party .jar to be loaded by jWebSocket</description>
		</library>
		-->
		<!--
		<library>
			<id>OracleJDBCDriver</id>
			<url>C:\Program Files\Oracle\ojdbc14-10.2.0.4.jar</url>
			<description>Oracle JDBC Driver 10.2.0.4 ro access Oracle SQL Databases from jWebSocket</description>
		</library>
		-->
	</libraries>

	<!-- jWebSocket logging configuration -->
	<logging>
		<log4j>
			<!-- new config file option in 1.0b, override settings below -->
			<config>${JWEBSOCKET_HOME}/conf/log4j.xml</config>
			<!-- automatic reload of log config options in ms (0 for none, minimum 5000ms) -->
			<autoreload>20000</autoreload>
		</log4j>
	</logging>

	<!--
		initializer class required only in 'dev' mode so that client application can register custom servers,
		plugins at compile time for debugging capability to test custom plugins and servers without a need for
		jar files
	-->
	<initializerClass>org.jwebsocket.factory.JWebSocketInitializer</initializerClass>

	<!--
		 Engines available for jWebSocket.
		 ONLY THE TOPMOST ENGINE WILL BE INITIALIZED AND RUN.
		 YOU CANNOT RUN MULTIPLE ENGINES AT A TIME.
	-->
	<!-- jWebSocket engine configuration -->
	<engines>
		<!-- TCP Engine Configuration -->
		<engine>
			<name>org.jwebsocket.tcp.TCPEngine</name>
			<id>tcp0</id>
			<jar>jWebSocketTCPEngine-1.0.jar</jar>
			<port>8787</port>
			<sslport>9797</sslport>
			<!-- keystore file with in %JWEBSOCKET_HOME%/conf -->
			<keystore>jWebSocket.ks</keystore>
			<!-- password to access keystore file -->
			<password>jwebsocket</password>
			<!-- CAUTION! -->
			<!-- not all browsers automatically accept self-signed certificates -->
			<!-- please follow instructions on the jWebSocket.org website, how
			     to trust self-signed certificates for the various browsers or
				 how to import signed private key/certificate bundles into the keystore -->

			<!-- these domains are accepted by the engine listening on the above mentioned port -->
			<domains>
				<domain>http://jwebsocket.org</domain>
				<domain>http://jwebsocket.com</domain>
				<domain>http://www.jwebsocket.org</domain>
				<domain>http://www.jwebsocket.com</domain>
				<domain>http://localhost</domain>
				<domain>http://127.0.0.1</domain>
				<domain>http://localhost:8080</domain>
				<domain>http://127.0.0.1:8080</domain>

				<domain>https://jwebsocket.org</domain>
				<domain>https://jwebsocket.com</domain>
				<domain>https://www.jwebsocket.org</domain>
				<domain>https://www.jwebsocket.com</domain>
				<domain>https://localhost</domain>
				<domain>https://127.0.0.1</domain>
				
				<domain>http://10.208.7.110</domain>
				<domain>http://10.21.68.56</domain>
				<domain>http://lilchat.heroku.com</domain>
			</domains>
			<!-- default session timeout 1h, max timeout currently 1 hour -->
			<timeout>0</timeout>
			<!--
				maximum size of the data packet that the engine will read,
				if the frame size is larger than this the connection will be closed.
			-->
			<maxframesize>1048840</maxframesize>
		</engine>

		<!-- NIO Engine Configuration -->
		<engine>
			<name>org.jwebsocket.tcp.nio.NioTcpEngine</name>
			<id>nio0</id>
			<jar>jWebSocketNIOEngine-1.0.jar</jar>
			<port>8787</port>
			<sslport>9797</sslport>
			<!-- keystore file with in %JWEBSOCKET_HOME%/conf -->
			<!-- CAUTION! -->
			<!-- not all browsers automatically accept self-signed certificates -->
			<!-- please follow instructions on the jWebSocket.org website, how
			     to trust self-signed certificates for the various browsers or
				 how to import signed private key/certificate bundles into the keystore -->
			<keystore>jWebSocket.ks</keystore>
			<!-- password to access keystore file -->
			<password>jWebSocket</password>
			<!-- these domains are accepted by the engine listening on the above mentioned port -->
			<domains>
				<domain>jwebsocket.org</domain>
				<domain>jwebsocket.com</domain>
				<domain>localhost</domain>
			</domains>
			<!-- default session timeout 1h, max timeout currently 1 hour -->
			<timeout>0</timeout>
			<!--
				maximum size of the data packet that the engine will read,
				if the frame size is larger than this the connection will be closed.
			-->
			<maxframesize>1048840</maxframesize>
		</engine>

		<!-- Jetty Engine Configuration -->
		<engine>
			<name>org.jwebsocket.jetty.JettyEngine</name>
			<id>jetty0</id>
			<jar>jWebSocketJettyEngine-1.0.jar</jar>
			<!-- Attention! The jWebSocket JettyEngine listens on same port like
				 Jetty's http. The http protocol is upgraded to use WebSockets.
				 The http/websocket port can be configured via the Jetty
				 configuration in the jetty.xml configuration file.
			-->
			<!-- set both port settings to "0" (null) if running Jetty
				 Servlet Container for Web Apps and embed jWebSocket library.
				 This uses the settings from jetty.xml, wraps the existing
				 Jetty WebSocket servlet and does not instantiate a separate
				 engine at run time within jWebSocket.
			-->
			<port>0</port>
			<sslport>0</sslport>
			<!-- use 80/443 for default http/ws or https/wss connections
				 when running a jWebSocket Server and use Jetty as an engine.
				 These settings are recommended only when running jWebSocket
				 on a separate server beside a WebServer and the firewall
				 does not allow access to ports 8787 and 9797.
			-->
			<!--
			<port>80</port>
			<sslport>443</sslport>
			-->
			<!-- use 8787/9797 for default http/ws or https/wss connections
				 These settings are recommended only when running jWebSocket
				 on the same server beside a WebServer and the firewall
				 grants access to ports 8787 and 9797.
			-->
			<!--
			<port>8787</port>
			<sslport>9797</sslport>
			-->
			<!-- these domains are accepted by the engine listening on the above mentioned port -->
			<domains>
				<domain>jwebsocket.org</domain>
				<domain>jwebsocket.com</domain>
				<domain>localhost</domain>
			</domains>
			<!-- default session timeout 1h, max timeout currently 1 hour -->
			<timeout>0</timeout>
			<!-- Jetty provides a WebSocket Servlet, set the context path here -->
			<context>/jWebSocket</context>
			<!-- Jetty provides a WebSocket Servlet, set the servlet path here -->
			<servlet>/jWebSocket</servlet>
			<!--
				maximum size of the data packet that the engine will read,
				if the frame size is larger than this the connection will be closed.
			-->
			<maxframesize>1048840</maxframesize>
		</engine>

		<!-- the netty engine -->
		<engine>
			<name>org.jwebsocket.netty.engines.NettyEngine</name>
			<id>netty0</id>
			<jar>jWebSocketNettyEngine-1.0.jar</jar>
			<port>8787</port>
			<sslport>9797</sslport>
			<!-- these domains are accepted by the engine listening on the above mentioned port -->
			<domains>
				<domain>javawebsocket.org</domain>
				<domain>javawebsocket.com</domain>
			</domains>
			<!-- default session timeout 2min, max timeout currently 1 hour -->
			<timeout>0</timeout>
			<!--
				maximum size of the data packet that the engine will read,
				if the frame size is larger than this the connection will be closed.
			-->
			<maxframesize>1048840</maxframesize>
		</engine>
	</engines>

	<!-- server types to be instantiated for jWebSocket -->
	<servers>
		<server>
			<name>org.jwebsocket.server.TokenServer</name>
			<id>ts0</id>
			<jar>jWebSocketTokenServer-1.0.jar</jar>
			<!-- define the thread pool properties. Thread are spawned when Token's spawnThread value is true 
			 Queue sizes and maximum pool sizes may be traded off for each other: Using large queues and small pools minimizes CPU usage, OS resources, and context-switching overhead, but can lead to artificially low throughput. 
			 If tasks frequently block (for example if they are I/O bound), a system may be able to schedule time for more threads than you otherwise allow. 
			 Use of small queues generally requires larger pool sizes, which keeps CPUs busier but may encounter unacceptable scheduling overhead, which also decreases throughput.
			 -->
			<threadPool>
				<!--  number of thread that are "waiting" even if the queue is empty  -->
				<corePoolSize>10</corePoolSize>
				<!--  number maximum of thread that can be running at the same time -->
				<maximumPoolSize>100</maximumPoolSize>
				<!--  time before the desctruction of "free" threads (seconds) -->
				<keepAliveTime>60</keepAliveTime>
				<!--  size of the blocking queue. Connection will be refused if the queue is full and the poolsize is equals to the maximumPoolSize -->
				<blockingQueueSize>1000</blockingQueueSize>
			</threadPool>
		</server>
	</servers>

	<!-- jWebSocket global rights -->
	<rights>
		<!-- configuration of system plug-in specific rights -->
		<right>
			<ns>org.jwebsocket.plugins.system</ns>
			<id>broadcast</id>
			<description>Broadcast message to all other clients.</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.system</ns>
			<id>send</id>
			<description>Send message to a single target client.</description>
		</right>


		<right>
			<ns>org.jwebsocket.plugins.jdbc</ns>
			<id>select</id>
			<description>Allow to select from jdbc resources</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.jdbc</ns>
			<id>insert</id>
			<description>Allow to insert into jdbc resources</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.jdbc</ns>
			<id>delete</id>
			<description>Allow to delete from jdbc resources</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.jdbc</ns>
			<id>update</id>
			<description>Allow to update jdbc resources</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.jdbc</ns>
			<id>querySQL</id>
			<description>Allow to select from jdbc resources using native SQL</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.jdbc</ns>
			<id>updateSQL</id>
			<description>Allow to update/insert/delete jdbc resources using native SQL</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.jdbc</ns>
			<id>execSQL</id>
			<description>Allow to update database meta data using native SQL</description>
		</right>
	<!-- Channel rights -->
		<right>
			<ns>org.jwebsocket.plugins.channels</ns>
			<id>start</id>
			<description>Allow to start a channel</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.channels</ns>
			<id>stop</id>
			<description>Allow to stop a channel</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.channels</ns>
			<id>suspend</id>
			<description>Allow to suspend a channel</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.channels</ns>
			<id>resume</id>
			<description>Allow to resume a channel</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.channels</ns>
			<id>subscribe</id>
			<description>Allow to subscribe to and unsubscribe from a channel</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.channels</ns>
			<id>publish</id>
			<description>Allow to publish to a channel</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.channels</ns>
			<id>getChannels</id>
			<description>Allow to retrieve the list of available channels</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.channels</ns>
			<id>getSubscribers</id>
			<description>Allow to retrieve the list of scubscribers of a certain channel</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.channels</ns>
			<id>getSubscriptions</id>
			<description>Allow to retrieve the list of channels the current client subscribed to</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.channels</ns>
			<id>createChannel</id>
			<description>Allow to create a new channel</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.channels</ns>
			<id>removeChannel</id>
			<description>Allow to remove an existing channel</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.channels</ns>
			<id>manageSystemChannels</id>
			<description>Allow to manage (create and remove) system channels from clients</description>
		</right>

	</rights>

	<!-- jWebSocket roles -->
	<roles>
		<role>
			<id>Administrator</id>
			<description>Administrators</description>
			<rights>
				<!-- list of rights for "Administrator" role (ns + . + id) -->
				<right>org.jwebsocket.plugins.system.broadcast</right>
				<right>org.jwebsocket.plugins.system.send</right>
				<right>org.jwebsocket.plugins.chat.broadcast</right>
				<right>org.jwebsocket.plugins.rpc.rpc</right>
				<right>org.jwebsocket.plugins.rpc.rrpc</right>
				<!-- rights for RPC's consists of the name space for the RPC plug-in plus the class name plus the method -->
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.Messaging.getMyMessages</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.rrpcTest2(array, array)</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.rrpcTest1()</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.rrpcTest1(string)</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.rrpcTest1(int)</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.getMD5</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.Messaging.getMyMessages</right>
				
				<!-- JDBC rights -->
				<right>org.jwebsocket.plugins.jdbc.select</right>
				<right>org.jwebsocket.plugins.jdbc.update</right>
				<right>org.jwebsocket.plugins.jdbc.insert</right>
				<right>org.jwebsocket.plugins.jdbc.delete</right>
				<right>org.jwebsocket.plugins.jdbc.querySQL</right>
				<right>org.jwebsocket.plugins.jdbc.updateSQL</right>
				<right>org.jwebsocket.plugins.jdbc.execSQL</right>

				<!-- JMS rights -->
				<right>org.jwebsocket.plugins.jms.sendAndListen.queue.testQueue</right>
				<right>org.jwebsocket.plugins.jms.listen.topic.testTopic</right>
				<right>org.jwebsocket.plugins.jms.send.topic.testTopic</right>
				<right>org.jwebsocket.plugins.jms.sendAndListen.topic.stockTopic</right>
				
				<right>org.jwebsocket.plugins.jms.createSession</right>
				<right>org.jwebsocket.plugins.jms.createConnection</right>
				<right>org.jwebsocket.plugins.jms.createQueue</right>
				<right>org.jwebsocket.plugins.jms.createConsumer</right>
				<right>org.jwebsocket.plugins.jms.rw.test.queue</right>

				<!-- filesystem rights -->
				<right>org.jwebsocket.plugins.filesystem.load</right>
				<right>org.jwebsocket.plugins.filesystem.save</right>
				<right>org.jwebsocket.plugins.filesystem.send</right>
				<right>org.jwebsocket.plugins.filesystem.getFilelist</right>

				<!-- Caution! Be careful with this right!
						Unauthorized use could stop your server from
						providing its services! -->
				<right>org.jwebsocket.plugins.admin.shutdown</right>
				<right>org.jwebsocket.plugins.admin.gc</right>
				<right>org.jwebsocket.plugins.admin.getConnections</right>

				<!-- channel rights -->
				<right>org.jwebsocket.plugins.channels.start</right>
				<right>org.jwebsocket.plugins.channels.stop</right>
				<right>org.jwebsocket.plugins.channels.suspend</right>
				<right>org.jwebsocket.plugins.channels.resume</right>
			</rights>
		</role>
		<role>
			<id>User</id>
			<description>Registered and authenticated users.</description>
			<rights>
				<!-- list of rights for "User" role (ns + . + id) -->
				<right>org.jwebsocket.plugins.system.broadcast</right>
				<right>org.jwebsocket.plugins.system.send</right>
				<right>org.jwebsocket.plugins.chat.broadcast</right>
				<right>org.jwebsocket.plugins.rpc.rpc</right>
				<right>org.jwebsocket.plugins.rpc.rrpc</right>
				<!-- rights for RPC's consists of the name space for the RPC plug-in plus the class name plus the method -->
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.Messaging.getMyMessages</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.rrpcTest2(array, array)</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.rrpcTest1()</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.rrpcTest1(string)</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.rrpcTest1(int)</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.getMD5</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.Messaging.getMyMessages</right>

				<!-- JDBC rights -->
				<right>org.jwebsocket.plugins.jdbc.select</right>
				<right>org.jwebsocket.plugins.jdbc.querySQL</right>

				<!-- filesystem rights -->
				<right>org.jwebsocket.plugins.filesystem.load</right>
				<right>org.jwebsocket.plugins.filesystem.save</right>
				<right>org.jwebsocket.plugins.filesystem.send</right>
				<right>org.jwebsocket.plugins.filesystem.getFilelist</right>
			</rights>
		</role>
		<role>
			<id>Guest</id>
			<description>Anonymous users (not registered)</description>
			<rights>
				<!-- list of rights for "Guest" role (ns + . + id) -->
				<right>org.jwebsocket.plugins.system.broadcast</right>
				<right>org.jwebsocket.plugins.system.send</right>
				<right>org.jwebsocket.plugins.chat.broadcast</right>
				<right>org.jwebsocket.plugins.rpc.rpc</right>
				<!-- rights for RPC's consists of the name space for the RPC plug-in plus the class name plus the method -->
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.Messaging.getMyMessages</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.rrpcTest2(array, array)</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.rrpcTest1()</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.rrpcTest1(string)</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.rrpcTest1(int)</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.getMD5</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.getRPCObject</right>
				<!-- configure rights for methods with unique identifiers, optionally including args -->
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.runIntDemo(int)</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.runStringDemo</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.runListDemo(array)</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.runMapDemo</right>
				<!-- configure individual rights for each overloaded method separately, including args -->
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.runOverloadDemo(int)</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.runOverloadDemo(string)</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.runOverloadDemo(array)</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.runOverloadDemo(map)</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.Messaging.getMyMessages</right>

				<!-- JDBC rights -->
				<right>org.jwebsocket.plugins.jdbc.select</right>

				<!-- JMS rights -->
				<right>org.jwebsocket.plugins.jms.sendAndListen.queue.testQueue</right>
				<right>org.jwebsocket.plugins.jms.listen.topic.testTopic</right>
				<right>org.jwebsocket.plugins.jms.send.topic.testTopic</right>
				<right>org.jwebsocket.plugins.jms.sendAndListen.topic.stockTopic</right>
				
				<right>org.jwebsocket.plugins.jms.createSession</right>
				<right>org.jwebsocket.plugins.jms.createConnection</right>
				<right>org.jwebsocket.plugins.jms.createQueue</right>
				<right>org.jwebsocket.plugins.jms.createConsumer</right>
				<right>org.jwebsocket.plugins.jms.rw.test.queue</right>

				<!-- filesystem rights -->
				<right>org.jwebsocket.plugins.filesystem.load</right>
				<right>org.jwebsocket.plugins.filesystem.send</right>
				<right>org.jwebsocket.plugins.filesystem.getFilelist</right>

				<!-- Channel rights -->
				<right>org.jwebsocket.plugins.channels.subscribe</right>

				<right>org.jwebsocket.plugins.channels.publish</right>
				<right>org.jwebsocket.plugins.channels.getChannels</right>
				<right>org.jwebsocket.plugins.channels.getSubscribers</right>
				<right>org.jwebsocket.plugins.channels.getSubscriptions</right>
				<right>org.jwebsocket.plugins.channels.getChannels</right>
				<right>org.jwebsocket.plugins.channels.createChannel</right>
				<right>org.jwebsocket.plugins.channels.removeChannel</right>

			</rights>
		</role>
	</roles>

	<!-- jWebSocket users -->
	<users>
		<user>
			<uuid>000-000-001-2011-07-14-11-32-40-223</uuid>
			<loginname>guest</loginname>
			<firstname>jWebSocket Guest User</firstname>
			<lastname>(Guest Role)</lastname>
			<!-- no password means that the user does not need a password -->
			<password>guest</password>
			<description>jWebSocket Guest User</description>
			<status>1</status>
			<roles>
				<!-- should be restricted in your application! open for demo purposes only! -->
				<role>Guest</role>
			</roles>
		</user>
		<user>
			<uuid>000-000-002-2011-07-14-11-33-20-493</uuid>
			<loginname>user</loginname>
			<firstname>jWebSocket Authenticated User</firstname>
			<lastname>(User Role)</lastname>
			<password>user</password>
			<description>jWebSocket Standard User</description>
			<!-- 0=blocked 1=allowed ... future states pending -->
			<status>1</status>
			<roles>
				<!-- the rights of all roles are merged -->
				<role>Guest</role>
				<role>User</role>
			</roles>
		</user>
		<user>
			<uuid>000-000-003-2011-07-14-11-34-17-189</uuid>
			<loginname>root</loginname>
			<firstname>jWebSocket Root User</firstname>
			<lastname>(Administrator Role)</lastname>
			<password>root</password>
			<description>jWebSocket Root User</description>
			<!-- 0=blocked 1=allowed ... future states pending -->
			<status>1</status>
			<roles>
				<!-- the rights of all roles are merged -->
				<role>Guest</role>
				<role>User</role>
				<role>Administrator</role>
			</roles>
		</user>
		<user>
			<uuid>000-000-004-2011-07-14-11-35-54-871</uuid>
			<loginname>anonymous</loginname>
			<firstname>jWebSocket Anonymous User</firstname>
			<lastname>(Roles to be specified!)</lastname>
			<!-- empty password -->
			<password></password>
			<description>jWebSocket Anonymous User (Specify if anonymous logins should be supported at all in System Plug-in)</description>
			<!-- 0=blocked 1=allowed ... future states pending -->
			<status>1</status>
			<roles>
				<!-- the rights of all roles are merged -->
				<role>Guest</role>
				<role>User</role>
				<role>Administrator</role>
			</roles>
		</user>
	</users>

	<!-- plug-ins to be instantiated for jWebSocket -->
	<plugins>
		<!-- the system plug-in, do not remove, mandatory for basic WebsScket communication operations -->
		<plugin>
			<name>org.jwebsocket.plugins.system.SystemPlugIn</name>
			<ns>org.jwebsocket.plugins.system</ns>
			<id>jws.system</id>
			<jar>jWebSocketServer-1.0.jar</jar>
			<!-- plug-in specific settings -->
			<settings>
				<setting key="spring_config">${JWEBSOCKET_HOME}/conf/SystemPlugIn/system.xml</setting>
				
				<!-- specify whether open, close, login, logout events should 
					 be broadcasted per default. To suppress these broadcasts
					 per events turn settings "on" here and optionally suppress
					 them per client command. -->
				<setting key="broadcastOpenEvent">true</setting>
				<setting key="broadcastCloseEvent">true</setting>
				<setting key="broadcastLoginEvent">true</setting>
				<setting key="broadcastLogoutEvent">true</setting>
				<setting key="allowAnonymousLogin">true</setting>
				<!-- this is the user name used for anonymous logins,
					all anonymous users that just connect will get this user 
					name and all roles and rights assigned to this user.
					Hence, be careful with the roles and rights you assign to 
					this user when you set allowAnonymousLogin to true -->
				<setting key="anonymousLoginName">anonymous</setting>
				<setting key="loginNameCaseInsensitive">true</setting>
				<!-- if this flag is set to true all unknown users automatically 
					are anonymous users. This means they required the optional 
					anonymous password and they get the roles and rights from 
					the anonymous user. -->
				<setting key="allowAutoAnonymous">true</setting>
			</settings>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</plugin>



		<!-- FlashBridge-Plug-in to support WebSocket communication on older browsers via flash -->
		<plugin>
			<name>org.jwebsocket.plugins.flashbridge.FlashBridgePlugIn</name>
			<id>jws.flashbridge</id>
			<ns>org.jwebsocket.plugins.flashbridge</ns>
			<jar>jWebSocketServer-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
			<settings>
				<!-- if you remove this setting the plug-in uses an internal
				     "allow all ports and domains" default crossdomain.xml -->
				<setting key="crossdomain_xml">${JWEBSOCKET_HOME}/conf/FlashPlugIn/crossdomain.xml</setting>
			</settings>
		</plugin>

		<!--
		<plugin>
			<name>org.jwebsocket.plugins.chat.ChatPlugIn</name>
			<id>jws.chat</id>
			<ns>org.jwebsocket.plugins.chat</ns>
			<jar>jWebSocketChatPlugIn-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</plugin>
		-->

		<!-- plug-in for shared objects -->
		<plugin>
			<name>org.jwebsocket.plugins.sharedobjects.SharedObjectsPlugIn</name>
			<id>jws.sharedObjects</id>
			<ns>org.jwebsocket.plugins.sharedobjects</ns>
			<jar>jWebSocketSharedObjectsPlugIn-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</plugin>

		<!-- plug-in to support various independant streams on the server -->
		<plugin>
			<name>org.jwebsocket.plugins.streaming.StreamingPlugIn</name>
			<id>jws.streaming</id>
			<ns>org.jwebsocket.plugins.streaming</ns>
			<jar>jWebSocketStreamingPlugIn-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</plugin>

		<!-- plug-in to communicate via channels -->
		<plugin>
			<name>org.jwebsocket.plugins.channels.ChannelPlugIn</name>
			<id>jws.channels</id>
			<ns>org.jwebsocket.plugins.channels</ns>
			<jar>jWebSocketChannelPlugIn-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
			<settings>
				<setting key="spring_config">${JWEBSOCKET_HOME}/conf/ChannelPlugIn/channel.xml</setting>
				<!-- config has been moved to channel.xml spring config -->
			</settings>
		</plugin>


		<!-- plug-in to track statistic data about the server usage -->
		<plugin>
			<!-- ensure that this plug-in is loaded after the streaming plug-in! -->
			<name>org.jwebsocket.plugins.statistics.StatisticsPlugIn</name>
			<id>jws.statistics</id>
			<ns>org.jwebsocket.plugins.statistics</ns>
			<jar>jWebSocketStatisticsPlugIn-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</plugin>



		<!-- plug-in for messaging via JMS 
		<plugin>
			<name>org.jwebsocket.plugins.jms.JMSPlugIn</name>
			<id>jws.jms</id>
			<ns>org.jWebSocket.plugins.jms</ns>
			<jar>jWebSocketJMSPlugIn-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
			<settings>
				<setting key="spring_config">${JWEBSOCKET_HOME}/conf/JMSPlugIn/jms.xml</setting>
				<setting key="connectionFactory:1" type="json">{name:"connectionFactory"}</setting>
				<setting key="destination:1" type="json">{name:"testQueue",pubSubDomain:false,cfName:"connectionFactory",deliveryPersistent:false}</setting>
				<setting key="destination:2" type="json">{name:"testTopic",pubSubDomain:true,cfName:"connectionFactory",deliveryPersistent:false}</setting>
				<setting key="destination:3" type="json">{name:"stockTopic",pubSubDomain:true,cfName:"connectionFactory",deliveryPersistent:false}</setting>
			</settings>
		</plugin>
		-->
		
		
		<!-- plug-in to support server side logging for clients -->
		<!-- THIS PLUG-IN REQUIRES THE JDBC PLUG-IN! -->
		<!-- LOAD JDBC PLUG-IN BEFORE THE LOGGING-PLUG-IN! -->
		<plugin>
			<name>org.jwebsocket.plugins.logging.LoggingPlugIn</name>
			<id>jws.logging</id>
			<ns>org.jwebsocket.plugins.logging</ns>
			<jar>jWebSocketLoggingPlugIn-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
			<settings>
				<setting key="implementation">Log4J</setting>
				<setting key="table:name">log</setting>
				<setting key="field:level">level</setting>
				<setting key="field:info">info</setting>
				<setting key="field:message">message</setting>
			</settings>
		</plugin>

		<!-- this is a sample for a user plug-in -->
		<plugin>
			<name>org.jwebsocket.plugins.sample.SamplePlugIn</name>
			<id>jws.sample</id>
			<ns>org.jwebsocket.plugins.sample</ns>
			<jar>jWebSocketSamples-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</plugin>



		<!-- Reporting plug-in -->
		<plugin>
			<name>org.jwebsocket.plugins.reporting.ReportingPlugIn</name>
			<id>jws.test</id>
			<ns>org.jwebsocket.plugins.reporting</ns>
			<jar>jWebSocketReportingPlugIn-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
			<settings>
				<!-- folder where the report specs are located -->
				<setting key="reportFolder">${JWEBSOCKET_HOME}/reports</setting>
				<setting key="outputFolder">c:/svn/jWebSocket/branches/jWebSocket-1.0/jWebSocketClient/web/public/reports/</setting>
				<setting key="outputURL">http://localhost/jwc10/public/reports/</setting>
				<setting key="reportNamePattern">${reportname}_${timestamp}</setting>
			</settings>
		</plugin>
		
		<!-- API disclosure plugin -->
		<plugin>
			<name>org.jwebsocket.plugins.api.APIPlugIn</name>
			<id>jws.api</id>
			<ns>org.jwebsocket.plugins.api</ns>
			<jar>jWebSocketAPIPlugIn-1.0.jar</jar>
			<settings>
				<setting key="config_file">api/api.xml</setting>
			</settings>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</plugin>

		<!-- performance tests plugin -->
		<plugin>
			<name>org.jwebsocket.plugins.test.PerfTestPlugIn</name>
			<id>jws.test</id>
			<ns>org.jwebsocket.plugins.test</ns>
			<jar>jWebSocketTestPlugIn-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</plugin>

		<!-- benchmark plugin -->
		<plugin>
			<name>org.jwebsocket.plugins.benchmark.BenchmarkPlugIn</name>
			<id>jws.benchmark</id>
			<ns>org.jwebsocket.plugins.benchmark</ns>
			<jar>jWebSocketBenchmarkPlugIn-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</plugin>

		<!-- automated tests plugin -->
		<plugin>
			<name>org.jwebsocket.plugins.test.AutomTestPlugIn</name>
			<id>jws.test</id>
			<ns>org.jwebsocket.plugins.test</ns>
			<jar>jWebSocketTestPlugIn-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</plugin>


		<!-- JQuery Demo plugin -->
		<!--
		<plugin>
			<name>org.jwebsocket.plugins.jquery.JQueryPlugIn</name>
			<id>jws.jquery</id>
			<ns>org.jwebsocket.jquery</ns>
			<jar>jWebSocketJQueryPlugIn-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</plugin>
		-->
		<!--
		<plugin>
			<name>org.jwebsocket.plugins.events.EventsPlugIn</name>
			< ! - - TODO: NAMESPACE ?? - - >
			<ns>test</ns>
			< ! - -
			<ns>org.jwebsocket.plugins.events</ns>
			- - >
			<id>jws.events</id>
			< ! - - TODO: ID?? - - >
			< ! - - 
			<id>jws.events.test</id>
			- - >
			<jar>jWebSocketEventsPlugIn-1.0.jar</jar>
			< ! - -
			<settings>
				<setting key="config" type="json">{xml_config:"${JWEBSOCKET_HOME}/conf/EventsPlugIn.xml"}</setting>
			</settings>
			- - >
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</plugin>
		-->
		
		<plugin>
			<name>server.cooproject.itk.hu.serverPlugin</name>
			<id>jws.coopserver</id>
			<ns>hu.itk.cooproject.server</ns>
			<jar>jWebSocketNotUsed-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</plugin>
	</plugins>



	<!-- filters to be instantiated for jWebSocket -->
	<filters>
		<filter>
			<name>org.jwebsocket.filters.custom.CustomTokenFilter</name>
			<id>jws.userFilter</id>
			<ns>org.jwebsocket.filters.custom</ns>
			<jar>jWebSocketPlugins-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</filter>
	</filters>

</jWebSocket>
